@{
    ViewData["Title"] = "Instructions";
}
<h1 id="instruction-heading">@ViewData["Title"]</h1>

<div id=instructions>
    <h5>Code Input</h5>
    <p>
        C# code is to be entered into the text editor. The function to be tested must be a static method called "Algorithm".
        The method must be held in a class called "Solution". The default code provided shows the correct class and method headers.
        The default code can be restored at any point using the reset button located at the top right of the text box.
    </p>
    <p>  
        The input arguments and return type of the method header may be swapped to any of C#'s built in types. This includes
        all integer and floating point numberic types as well as strings, bools, and chars. Any user-defined types must be
        defined within the algorithm method. Collections may be used, but not as the Algorithm method's input arguments or return type.
        Additionally, the appropriate using directive must be defined.
    </p>
    <h5>Testing Data</h5>
    <p>
        Data for accuracy testing can be provided in the labelled text boxes. If multiple inputs are required, these should be comma separated.
        If an array is required, this should be defined by comma seaparated elements enclosed by square brackets. For example [1,2,3],hello defines an
        integer array with the elements 1,2 and 3, and the string "hello". String values should not be enclosed by quotation marks, and floating point values 
        should not be proceeded by the letter f. After entering the input arguments and expected output value, clicking the "Add" button will
        add this data to the table below. Each set of data in the table will contain a delete button at the right hand side which will allow it to be
        removed from the table.
    </p>
    <h5>Timeout Time</h5>
    <p>
        The maximum timeout time is defined below the testing-data table. This defines the maximum time to be spent running the algorithm. If 
        this time is exceeded when testing a specific set of input arguments, this data will be labelled appropriately to indicate that the program timed out.
    </p>
    <h5>Starting the Analysis</h5>
    <p>
        After finishing entering the C# code and the testing-data, the analysis can be started by clicking the "Go" button. If only speed testing
        is required, data does not have to be entered by the user as the speed-testing data is automatically genarated. The program may take
        significant time to perform the calculation if the provided algorithm is computationally expensive. However, it will never exceed the
        defined maximum execution time.
    </p>
    <p>
        If there are any errors in the user provided code, these will be displayed beneath the text editor. For example, mistakes with the class
        and method headers will be displayed, and compilation errors will be explained. If incorrect input arguments or output values are displayed, this
        will be indicated in the table next to the erraneous dataset.
    </p>
    <p>
        If accuracy-testing data is provided, the accuracy value will be displayed showing the accuracy percentage. Additionally, each set of data
        will be labelled as correct, incorrect, runtime error, or timeout. Compile error indicates that the specific input arguments caused a runtime error.
        As previously stated, timeout indicates that the algorithm exceeded the defined maximum execution time. Speed-testing data will automatically be 
        genarated based on the algorithm's input arguments. This will be tabulated and shown at the bottom of the page along with the corresponding runtimes.
    </p>
</div>